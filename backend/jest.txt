FAIL tests/integration/signOn.test.js
  ● signOn mutation signs on a person

    expect(received).toEqual(expected) // deep equality

    - Expected
    + Received

      Object {
    -   "signOn": Object {
    -     "boatName": " ",
    -     "boatNumber": " ",
    -     "eventId": "1",
    -     "helmName": " ",
    -     "pY": 0,
    -     "userId": "1",
    -   },
    +   "signOn": null,
      }

      35 |   })
      36 |   const signOnJson = await signOn.json();
    > 37 |   expect(signOnJson.data.signOn).toEqual(obj)
         |                                  ^
      38 |   const response = await fetch('http://localhost:3000/graphql', {
      39 |     method: 'post',
      40 |     body: JSON.stringify({

      at Object.toEqual (tests/integration/signOn.test.js:37:34)

FAIL tests/integration/laps.test.js
  ● newlap creates a new lap

    TypeError: Cannot read property 'userId' of null

      24 |   })
      25 |   const newLapJson = await newLap.json()
    > 26 |   expect(newLapJson.data.createLap.userId).toEqual("2")
         |                                    ^
      27 | 
      28 |   let obj1 = {
      29 |     eventId: "2"

      at Object.userId (tests/integration/laps.test.js:26:36)

  ● getLaps returns laps

    TypeError: Cannot read property '0' of null

      71 | })
      72 | const getLapsJson = await getLap.json()
    > 73 | expect(getLapsJson.data.getLapsOfRace[0].lapId).toEqual("0")
         |        ^
      74 | 
      75 | })
      76 | test('updateLap removes lap', async ()=> {

      at Object.<anonymous>.test (tests/integration/laps.test.js:73:8)

  ● updateLap removes lap

    TypeError: Cannot read property 'Lap' of null

       98 |   })
       99 |   const updateLapJson = await updateLap.json()
    > 100 |   expect(updateLapJson.data.updateLap.Lap.eventId).toEqual("3")
          |                                       ^
      101 | 
      102 | })
      103 | 

      at Object.Lap (tests/integration/laps.test.js:100:39)

  ● updateLap updates lap

    TypeError: Cannot read property 'Lap' of null

      127 |   })
      128 |   const updateLapJson = await updateLap.json()
    > 129 |   expect(updateLapJson.data.updateLap.Lap.lapTime).toEqual(1)
          |                                       ^
      130 | 
      131 | })

      at Object.Lap (tests/integration/laps.test.js:129:39)

FAIL tests/integration/helm.test.js
  ● getBoatsOfHelm works

    expect(received).toEqual(expected) // deep equality

    Expected: [{"boatName": " ", "boatNumber": " ", "name": " ", "pY": 0}]
    Received: null

      28 |           name: " "
      29 |         }]
    > 30 |   expect(helmJson.data.getBoatsOfHelm).toEqual(expectedResponse)
         |                                        ^
      31 | })

      at Object.toEqual (tests/integration/helm.test.js:30:40)

FAIL tests/integration/boatData.test.js
  ● allBoatData

    expect(received).toEqual(expected) // deep equality

    Expected: [{"boatName": "test", "crew": 0, "pY": 0}]
    Received: null

      19 |   })
      20 |   const result =await response.json()
    > 21 |   expect(result.data.allBoatData).toEqual(BoatData);
         |                                   ^
      22 | })

      at Object.toEqual (tests/integration/boatData.test.js:21:35)

FAIL tests/integration/events.test.js
  ● allEvents query returns event

    expect(received).toEqual(expected) // deep equality

    Expected: [{"eventId": "1", "eventName": "test", "eventTimeStamp": 0}, {"eventId": "4", "eventName": "event", "eventTimeStamp": 0}]
    Received: null

      27 |     }
      28 |   })
    > 29 |   expect(result.data.allEvents).toEqual(RacesEvents);
         |                                 ^
      30 | })
      31 | 
      32 | 

      at Object.toEqual (tests/integration/events.test.js:29:33)

  ● recentEvents query returns event

    expect(received).toEqual(expected) // deep equality

    Expected: [{"eventId": "1", "eventName": "test", "eventTimeStamp": 0}, {"eventId": "4", "eventName": "event", "eventTimeStamp": 0}]
    Received: null

      62 |     }
      63 |   })
    > 64 |   expect(result.data.recentEvents).toEqual(RacesEvents);
         |                                    ^
      65 | })
      66 | 
      67 | 

      at Object.toEqual (tests/integration/events.test.js:64:36)

  ● specificEvent query returns event

    expect(received).toEqual(expected) // deep equality

    Expected: [{"boatName": " ", "boatNumber": " ", "eventId": "2", "helmName": " ", "userId": "1"}]
    Received: null

      100 |       }
      101 |     })
    > 102 |   expect(result.data.specificEvent).toEqual(RacesEvents);
          |                                     ^
      103 | })
      104 | 
      105 | 

      at Object.toEqual (tests/integration/events.test.js:102:37)

  ● createEvent mutation creates and returns event

    expect(received).toEqual(expected) // deep equality

    - Expected
    + Received

      Object {
    -   "event": Object {
    -     "eventName": "test",
    -     "eventTimeStamp": 0,
    -   },
    +   "event": null,
      }

      128 |   })
      129 |   const result = await response.json()
    > 130 |   expect(result.data.createEvent).toEqual(input.input);
          |                                   ^
      131 |   const check = await fetch('http://localhost:3000/graphql', {
      132 |     method: 'post',
      133 |     body: JSON.stringify({

      at Object.toEqual (tests/integration/events.test.js:130:35)

  ● removeEvent mutation removes event

    TypeError: Cannot read property 'eventId' of null

      197 |       input: {
      198 |         event:{
    > 199 |           eventId: createJson.data.createEvent.event.eventId
          |                                                      ^
      200 |         } 
      201 |       }
      202 |     }})

      at Object.eventId (tests/integration/events.test.js:199:54)

  ● startRace starts the race

    TypeError: Cannot read property 'StartRaceData' of null

      242 |   })
      243 |   const responseJson = await response.json();
    > 244 |   expect(responseJson.data.startRace.StartRaceData).toEqual(inputObj.input.StartRaceData);
          |                                      ^
      245 |   
      246 | })
      247 | 

      at Object.StartRaceData (tests/integration/events.test.js:244:38)

  ● getRaceStart gets the start time of the race

    TypeError: Cannot read property 'StartRaceData' of null

      268 |       variables: inputObj})
      269 |   })
    > 270 |   console.log((await startRace.json()).data.startRace.StartRaceData)
          |                                                       ^
      271 |   //const responseJson = await response.json();
      272 |   //expect(responseJson.data.startRace.StartRaceData).toEqual(inputObj.input.StartRaceData);
      273 |   const getRaceStartInputObj = {

      at Object.StartRaceData (tests/integration/events.test.js:270:55)

Test Suites: 5 failed, 5 total
Tests:       14 failed, 14 total
Snapshots:   0 total
Time:        9.218s
Ran all test suites related to changed files.
FAIL tests/integration/signOn.test.js
  ● signOn mutation signs on a person

    expect(received).toEqual(expected) // deep equality

    - Expected
    + Received

      Object {
    -   "signOn": Object {
    -     "boatName": " ",
    -     "boatNumber": " ",
    -     "eventId": "1",
    -     "helmName": " ",
    -     "pY": 0,
    -     "userId": "1",
    -   },
    +   "signOn": null,
      }

      35 |   })
      36 |   const signOnJson = await signOn.json();
    > 37 |   expect(signOnJson.data.signOn).toEqual(obj)
         |                                  ^
      38 |   const response = await fetch('http://localhost:3000/graphql', {
      39 |     method: 'post',
      40 |     body: JSON.stringify({

      at Object.toEqual (tests/integration/signOn.test.js:37:34)

FAIL tests/integration/laps.test.js
  ● newlap creates a new lap

    TypeError: Cannot read property 'userId' of null

      24 |   })
      25 |   const newLapJson = await newLap.json()
    > 26 |   expect(newLapJson.data.createLap.userId).toEqual("2")
         |                                    ^
      27 | 
      28 |   let obj1 = {
      29 |     eventId: "2"

      at Object.userId (tests/integration/laps.test.js:26:36)

  ● getLaps returns laps

    TypeError: Cannot read property '0' of null

      71 | })
      72 | const getLapsJson = await getLap.json()
    > 73 | expect(getLapsJson.data.getLapsOfRace[0].lapId).toEqual("0")
         |        ^
      74 | 
      75 | })
      76 | test('updateLap removes lap', async ()=> {

      at Object.<anonymous>.test (tests/integration/laps.test.js:73:8)

  ● updateLap removes lap

    TypeError: Cannot read property 'Lap' of null

       98 |   })
       99 |   const updateLapJson = await updateLap.json()
    > 100 |   expect(updateLapJson.data.updateLap.Lap.eventId).toEqual("3")
          |                                       ^
      101 | 
      102 | })
      103 | 

      at Object.Lap (tests/integration/laps.test.js:100:39)

  ● updateLap updates lap

    TypeError: Cannot read property 'Lap' of null

      127 |   })
      128 |   const updateLapJson = await updateLap.json()
    > 129 |   expect(updateLapJson.data.updateLap.Lap.lapTime).toEqual(1)
          |                                       ^
      130 | 
      131 | })

      at Object.Lap (tests/integration/laps.test.js:129:39)

FAIL tests/integration/helm.test.js
  ● getBoatsOfHelm works

    expect(received).toEqual(expected) // deep equality

    Expected: [{"boatName": " ", "boatNumber": " ", "name": " ", "pY": 0}]
    Received: null

      28 |           name: " "
      29 |         }]
    > 30 |   expect(helmJson.data.getBoatsOfHelm).toEqual(expectedResponse)
         |                                        ^
      31 | })

      at Object.toEqual (tests/integration/helm.test.js:30:40)

FAIL tests/integration/boatData.test.js
  ● allBoatData

    expect(received).toEqual(expected) // deep equality

    Expected: [{"boatName": "test", "crew": 0, "pY": 0}]
    Received: null

      19 |   })
      20 |   const result =await response.json()
    > 21 |   expect(result.data.allBoatData).toEqual(BoatData);
         |                                   ^
      22 | })

      at Object.toEqual (tests/integration/boatData.test.js:21:35)

FAIL tests/integration/events.test.js
  ● allEvents query returns event

    expect(received).toEqual(expected) // deep equality

    Expected: [{"eventId": "1", "eventName": "test", "eventTimeStamp": 0}, {"eventId": "4", "eventName": "event", "eventTimeStamp": 0}]
    Received: null

      27 |     }
      28 |   })
    > 29 |   expect(result.data.allEvents).toEqual(RacesEvents);
         |                                 ^
      30 | })
      31 | 
      32 | 

      at Object.toEqual (tests/integration/events.test.js:29:33)

  ● recentEvents query returns event

    expect(received).toEqual(expected) // deep equality

    Expected: [{"eventId": "1", "eventName": "test", "eventTimeStamp": 0}, {"eventId": "4", "eventName": "event", "eventTimeStamp": 0}]
    Received: null

      62 |     }
      63 |   })
    > 64 |   expect(result.data.recentEvents).toEqual(RacesEvents);
         |                                    ^
      65 | })
      66 | 
      67 | 

      at Object.toEqual (tests/integration/events.test.js:64:36)

  ● specificEvent query returns event

    expect(received).toEqual(expected) // deep equality

    Expected: [{"boatName": " ", "boatNumber": " ", "eventId": "2", "helmName": " ", "userId": "1"}]
    Received: null

      100 |       }
      101 |     })
    > 102 |   expect(result.data.specificEvent).toEqual(RacesEvents);
          |                                     ^
      103 | })
      104 | 
      105 | 

      at Object.toEqual (tests/integration/events.test.js:102:37)

  ● createEvent mutation creates and returns event

    expect(received).toEqual(expected) // deep equality

    - Expected
    + Received

      Object {
    -   "event": Object {
    -     "eventName": "test",
    -     "eventTimeStamp": 0,
    -   },
    +   "event": null,
      }

      128 |   })
      129 |   const result = await response.json()
    > 130 |   expect(result.data.createEvent).toEqual(input.input);
          |                                   ^
      131 |   const check = await fetch('http://localhost:3000/graphql', {
      132 |     method: 'post',
      133 |     body: JSON.stringify({

      at Object.toEqual (tests/integration/events.test.js:130:35)

  ● removeEvent mutation removes event

    TypeError: Cannot read property 'eventId' of null

      197 |       input: {
      198 |         event:{
    > 199 |           eventId: createJson.data.createEvent.event.eventId
          |                                                      ^
      200 |         } 
      201 |       }
      202 |     }})

      at Object.eventId (tests/integration/events.test.js:199:54)

  ● startRace starts the race

    TypeError: Cannot read property 'StartRaceData' of null

      242 |   })
      243 |   const responseJson = await response.json();
    > 244 |   expect(responseJson.data.startRace.StartRaceData).toEqual(inputObj.input.StartRaceData);
          |                                      ^
      245 |   
      246 | })
      247 | 

      at Object.StartRaceData (tests/integration/events.test.js:244:38)

  ● getRaceStart gets the start time of the race

    expect(received).toEqual(expected) // deep equality

    Expected: 0
    Received: null

      283 |   })
      284 |   const responseJson = await response.json();
    > 285 |   expect(responseJson.data.getRaceStart).toEqual(0)
          |                                          ^
      286 |   
      287 | })
      288 | 

      at Object.toEqual (tests/integration/events.test.js:285:42)

  ● editRaceStart removes a race start time

    ReferenceError: getRaceStartInputObj is not defined

      301 |       }
      302 |       `,
    > 303 |       variables: getRaceStartInputObj})
          |                  ^
      304 |   })
      305 | 
      306 | })

      at Object.getRaceStartInputObj (tests/integration/events.test.js:303:18)

Test Suites: 5 failed, 5 total
Tests:       15 failed, 15 total
Snapshots:   0 total
Time:        8.113s
Ran all test suites related to changed files.
