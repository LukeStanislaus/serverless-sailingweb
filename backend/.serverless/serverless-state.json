{
  "service": {
    "service": "SailingWeb",
    "serviceObject": {
      "name": "SailingWeb"
    },
    "provider": {
      "stage": "dev",
      "region": "us-east-1",
      "variableSyntax": "\\${([ ~:a-zA-Z0-9._@'\",\\-\\/\\(\\)*]+?)}",
      "name": "aws",
      "runtime": "nodejs8.10",
      "environment": null,
      "role": "arn:aws:iam::118983564982:role/sailingweb",
      "versionFunctions": true,
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "QueryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/SailingWeb-dev-query"
            }
          },
          "QueryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/SailingWeb/dev/1555504622538-2019-04-17T12:37:02.538Z/SailingWeb.zip"
              },
              "FunctionName": "SailingWeb-dev-query",
              "Handler": "src/graphql.graphqlHandler",
              "MemorySize": 1024,
              "Role": "arn:aws:iam::118983564982:role/sailingweb",
              "Runtime": "nodejs8.10",
              "Timeout": 6
            },
            "DependsOn": [
              "QueryLogGroup"
            ]
          },
          "QueryLambdaVersionb7K3OaOuJYzjK7Euh5xnrGTKhJaXPclel4WlLNzieDU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "QueryLambdaFunction"
              },
              "CodeSha256": "QZe1aF/SSfCvm4QtZzUaMd9JnUsWmjVy081KfLuhQXQ="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-SailingWeb",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              }
            }
          },
          "ApiGatewayResourceGraphql": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "graphql",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodGraphqlOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin == \"*\") #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceGraphql"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodGraphqlPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGraphql"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "QueryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1555504563463": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodGraphqlOptions",
              "ApiGatewayMethodGraphqlPost"
            ]
          },
          "QueryLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "QueryLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": {
                "Fn::Join": [
                  "",
                  [
                    "apigateway.",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "BoatData": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "boatName",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "crew",
                  "AttributeType": "N"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "boatName",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "crew",
                  "KeyType": "RANGE"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "BoatData"
            }
          },
          "Races": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "eventId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "type_id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "eventTimeStamp",
                  "AttributeType": "N"
                }
              ],
              "LocalSecondaryIndexes": [
                {
                  "IndexName": "eventId-eventTimeStamp-index",
                  "KeySchema": [
                    {
                      "AttributeName": "eventId",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "eventTimeStamp",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "eventId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "type_id",
                  "KeyType": "RANGE"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "Races"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "QueryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "QueryLambdaVersionb7K3OaOuJYzjK7Euh5xnrGTKhJaXPclel4WlLNzieDU"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.us-east-1.",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "dynamodb": {
        "start": {
          "port": 8000,
          "inMemory": true,
          "migrate": true
        }
      },
      "webpack": {
        "webpackConfig": "./webpack.config.js",
        "includeModules": true,
        "packager": "yarn"
      },
      "jest": {
        "collectCoverage": true
      }
    },
    "plugins": [
      "serverless-webpack",
      "serverless-jest-plugin",
      "serverless-dynamodb-local",
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "query": {
        "handler": "src/graphql.graphqlHandler",
        "events": [
          {
            "http": {
              "path": "graphql",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "SailingWeb-dev-query",
        "package": {
          "artifact": ".serverless\\SailingWeb.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs8.10",
        "vpc": {}
      }
    },
    "resources": {
      "Resources": {
        "BoatData": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "boatName",
                "AttributeType": "S"
              },
              {
                "AttributeName": "crew",
                "AttributeType": "N"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "boatName",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "crew",
                "KeyType": "RANGE"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "BoatData"
          }
        },
        "Races": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "eventId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "type_id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "eventTimeStamp",
                "AttributeType": "N"
              }
            ],
            "LocalSecondaryIndexes": [
              {
                "IndexName": "eventId-eventTimeStamp-index",
                "KeySchema": [
                  {
                    "AttributeName": "eventId",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "eventTimeStamp",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "eventId",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "type_id",
                "KeyType": "RANGE"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "Races"
          }
        }
      },
      "Outputs": {}
    },
    "layers": {}
  },
  "package": {
    "artifactDirectoryName": "serverless/SailingWeb/dev/1555504622538-2019-04-17T12:37:02.538Z",
    "artifact": ""
  }
}